# This values.yaml file serves a model loaded from a PVC
# See also defaults in chart values.yaml

# When true, LeaderWorkerSet is used instead of Deployment
multinode: false

modelArtifacts:
# This is the model name used to start vLLM.
  uri: "pvc://model-pvc/models"
  size: 5Gi

# Describe routing requirements. In addition to service level routing (OpenAI model name, service port)
# also describes elements for Gateway API Inference Extension configuration
routing:
  modelName: facebook/opt-125m
  servicePort: 8000

  # other fields are inherited from chart values.yaml
  proxy:
    secure: false

  # to change name of inference-gateway
  # parentRefs:
  # - name: inference-gateway

  inferencePool:
    create: true

  # required for certain gateways (e.g. Kgateway) but not others (Istio)
  # creating this so that it works for all gateways
  inferenceModel:
    create: true

  httpRoute:
    create: true
    matches:
    - path:
        type: PathPrefix
        value: /
      headers:
      - name: x-model-name
        type: Exact
        value: facebook/opt-125m

  epp:
    create: true
    # Inherit all from base chart values.yaml
    # env:

# Decode pod configuation
decode:
  create: true
  replicas: 1
  containers:
  - name: "vllm"
    image: "ghcr.io/llm-d/llm-d-dev:v0.2.0-rc.1"
    modelCommand: vllmServe
    args:
      # include this so you can use this value as 'model' in the OpenAI request
      - "--served-model-name"
      - "facebook/opt-125m"
      - "--enforce-eager"
      - "--kv-transfer-config"
      - '{"kv_connector":"NixlConnector", "kv_role":"kv_both"}'
    env:
      - name: CUDA_VISIBLE_DEVICES
        value: "0"
      - name: UCX_TLS
        value: "cuda_ipc,cuda_copy,tcp"
      - name: VLLM_NIXL_SIDE_CHANNEL_HOST
        valueFrom:
          fieldRef:
            fieldPath: status.podIP
      - name: VLLM_NIXL_SIDE_CHANNEL_PORT
        value: "5557"
      - name: VLLM_LOGGING_LEVEL
        value: DEBUG
    ports:
      - containerPort: 5557
        protocol: TCP
    resources:
      limits:
        memory: 16Gi
        cpu: "16"
        nvidia.com/gpu: "1"
      requests:
        cpu: "16"
        memory: 16Gi
        nvidia.com/gpu: "1"
    mountModelVolume: true

# Prefill pod configuation
prefill:
  create: true
  replicas: 1
  containers:
  - name: "vllm"
    image: "ghcr.io/llm-d/llm-d-dev:v0.2.0-rc.1"
    modelCommand: vllmServe
    args:
      # include this so you can use this value as 'model' in the OpenAI request
      - "--served-model-name"
      - "facebook/opt-125m"
      - "--enforce-eager"
      - "--kv-transfer-config"
      - '{"kv_connector":"NixlConnector", "kv_role":"kv_both"}'
    env:
      - name: CUDA_VISIBLE_DEVICES
        value: "0"
      - name: UCX_TLS
        value: "cuda_ipc,cuda_copy,tcp"
      - name: VLLM_NIXL_SIDE_CHANNEL_PORT
        value: "5557"
      - name: VLLM_NIXL_SIDE_CHANNEL_HOST
        valueFrom:
          fieldRef:
            fieldPath: status.podIP
      - name: VLLM_LOGGING_LEVEL
        value: DEBUG
    ports:
      - containerPort: 8000
        protocol: TCP
      - containerPort: 5557
        protocol: TCP
    resources:
      limits:
        memory: 16Gi
        cpu: "16"
        nvidia.com/gpu: "1"
      requests:
        cpu: "16"
        memory: 16Gi
        nvidia.com/gpu: "1"
