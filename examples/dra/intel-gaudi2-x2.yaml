# This example demonstrates the folowing capabilities
# 1. Use of Dynamic Resource Allocation (DRA)
# 2. Via DRA, select two Gaudi2 devices for the decode pod
# 3. For clarity, all other features are disabled, only Deployment and ResourceClaimTemplate are created

modelArtifacts:
  name: random/model
  uri: "hf://{{ .Values.modelArtifacts.name }}"
  size: 50Gi
  authSecretName: "llm-d-hf-token"

dra:
  enabled: true
  type: "intel-gaudi2-x2"
  claimTemplates:
  - name: intel-gaudi2-x2
    class: gaudi.intel.com
    match: "exactly"
    count: 2
    selectors:
    - cel:
        expression: device.attributes["gaudi.intel.com"].model == 'Gaudi2'

# Routing configuration
routing:
  proxy:
    enabled: false
  inferencePool:
    create: false
  httpRoute:
    create: false
  epp:
    create: false
decode:
  create: true
  replicas: 1
  containers:
  - name: "vllm"
    # Use custom vLLM image for Gaudi for now
    image: "opea/vllm-gaudi:1.22.0"

    # Use imageDefault mode - chart will generate basic vLLM command automatically
    modelCommand: "imageDefault"

    # Only specify Gaudi specific arguments that differ from defaults
    args:
    - --block-size=128
    - --max-num-seqs=256
    - --max-seq-len-to-capture=2048
    - --max-model-len=2048
    - --max-num-batched-token=16000
    env:
    - name: OMPI_MCA_btl_vader_single_copy_mechanism
      value: "none"
    - name: HABANA_LOGS # For OpenShift compatibility, set log path to writable location
      value: "/tmp/habana_logs"
    - name: VLLM_SKIP_WARMUP
      value: "true"
    - name: DO_NOT_TRACK
      value: "1"
    - name: VLLM_USE_V1
      value: "1"

    ports:
      - containerPort: 8200
        protocol: TCP

    mountModelVolume: true

prefill:
  create: false
multinode: false
